# Simple calculator
function calc() {
	local result="";
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//';  # remove trailing zeros
	else
		printf "$result";
	fi;
	printf "\n";
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i http://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Quick Git Commits
# be careful, adds everything
function gqc() {
	git add .
	git commit -m "$1"
}


#Copy any public key to the clipboard
function kcp() {
	pbcopy < ~/.ssh/$@.pub
}

function frame::wp() {

	local RED=`tput setaf 1`
	local GREEN=`tput setaf 2`
	local BLUE=`tput setaf 6`
	local YELLOW=`tput setaf 3`
	local PURPLE=`tput setaf 5`
	local NC=`tput sgr0` # No Color
	local TAG="${BLUE}FRAME TOOLSET ${NC}:::: "

	local NL=`tput il 1`

	local PROJECT=""

	if [ -z "$1" ];
	then
		read -p "${TAG}${YELLOW}Please Specify a project name: ${NC}'projectname' / n  (type 'n' to cancel)   " answer
		case ${answer} in
		    n|N|No|no|cancel )
		    	echo "${TAG}${RED} Exiting Setup (user cancellation)"
		        return 1
		    ;;
		    * )
		        PROJECT=${answer}
		    ;;
		esac
	else
		PROJECT=$1
	fi

	if [ -z "${PROJECT}" ]; then
		echo "${TAG}${RED} Exiting Setup (input error)"
		return 1
	fi
	echo "";
	echo "";
	echo "${TAG}${GREEN}Changing Working Dir";
	echo "${NC}................................";
	echo "";
	echo "";
	cd ~/projects/frame;
	echo `pwd`;
	echo "";
	echo "";
	echo "${TAG}${GREEN}Cloning Git repo";
	echo "${NC}................................";
	echo "";
	echo "";
	git clone git@bitbucket.org:framecreative/frame-wp-boilerplate.git ${PROJECT} --depth=1;
	echo "";
	echo "";
	echo "${TAG}${GREEN}Removing original Git Repo";
	echo "${NC}................................";
	echo "";
	echo "";
	cd ${PROJECT};

	rm -rf .git;

	echo "";
	echo "";
	echo "${TAG}${GREEN}Initialising new Git repo";
	echo "${NC}................................";
	echo "";
	echo "";

	git init

	echo "";
	echo "";
	echo "${TAG}${GREEN}Performing Search / Replace";
	echo "${NC}................................";
	echo "";
	echo "";

	find ./ -type f -exec sed -i '' -e "s/[PROJECTNAME]/${PROJECT}/g" {} \;

	echo "";
	echo "";
	echo "${TAG}${GREEN}Create initial Git commit";
	echo "${NC}................................";
	echo "";
	echo "";

	git add .;
	git commit -m "Initial commit after project initialisation";

	echo "";
	echo "";
	echo "${TAG}${GREEN}Installing Project Dependencies";
	echo "${NC}................................";
	echo "";
	echo "";

	composer install
	yarn

}

function frame::getenv() {

	local RED=`tput setaf 1`
	local GREEN=`tput setaf 2`
	local BLUE=`tput setaf 6`
	local YELLOW=`tput setaf 3`
	local PURPLE=`tput setaf 5`
	local NC=`tput sgr0` # No Color
	local TAG="${BLUE}FRAME TOOLSET ${NC}:::: "

	local NL=`tput il 1`

	local FILE=""
	local ENV_URL="https://bitbucket.org/framecreative/frame-wp-boilerplate/raw/master/env"

		if [ -z "$1" ];
	then
		read -p "${TAG}${YELLOW}Please Specify a file name: ${NC}'filename' / n  (type 'n' to cancel)   " answer
		case ${answer} in
		    n|N|No|no|cancel )
		    	echo "${TAG}${RED} Exiting Setup (user cancellation)"
		        return 1
		    ;;
		    * )
		        FILE=${answer}
		    ;;
		esac
	else
		FILE=$1
	fi

	if [ -z "${FILE}" ]; then
		echo "${TAG}${RED} Exiting Setup (input error)"
		return 1
	fi

	wget -O $FILE $ENV_URL

		echo "";
	echo "";
	echo "${TAG}${GREEN}env file downloaded to ${FILE} ";
	echo "${NC}................................";
	echo "";
	echo "";

}

function gdpl (){

	set -e

	local RED=`tput setaf 1`
	local GREEN=`tput setaf 2`
	local BLUE=`tput setaf 6`
	local YELLOW=`tput setaf 3`
	local PURPLE=`tput setaf 5`
	local NC=`tput sgr0` # No Color
	local TAG="${BLUE}FRAME TOOLSET ${NC}:::: "
	local NL=`tput il 1`

	if [ $# -eq 0 ]; then
		echo "${RED}Please supply a valid branch";
		exit 1;
	fi;

	if [ $# -eq 2 ]; then
		local SOURCE=${2}
	else
		local SOURCE='master'
	fi

	echo "";
	echo "";
	echo "${TAG}${YELLOW}Checking out branch \"${1}\"";
	echo "${NC}................................";
	echo "";
	echo "";

	git checkout $1;

	git pull origin $1;



	echo "";
	echo "";
	echo "${TAG}${YELLOW}Merging branch \"${SOURCE}\" into branch \"${1}\"";
	echo "${NC}................................";
	echo "";
	echo "";


	git merge ${SOURCE};


	echo "";
	echo "";
	echo "${TAG}${YELLOW}Merge complete! pushing to origin / ${1} ";
	echo "${NC}................................";
	echo "";
	echo "";

	git push origin $1;



	echo "";
	echo "";
	echo "${TAG}${GREEN}Push complete, returing you to branch \"${SOURCE}\" ";
	echo "${NC}................................";
	echo "";
	echo "";

	git checkout ${SOURCE};

}

function frame::sync () {
	rsync -azhO --exclude '.DS_Store' --exclude "node_modules" --exclude "bower_components" --exclude "vendor" /Users/dev/projects/frame/ /Volumes/datastore-alex-bishop/frame/
}

function php::debug (){

	local PHP_VERSION="7.2";
	local XDEBUG_ACTIVE="/usr/local/etc/php/${PHP_VERSION}/conf.d/ext-xdebug.ini";
	local XDEBUG_DEACTIVE="/usr/local/etc/php/${PHP_VERSION}/conf.d/ext-xdebug.ini.deactivated";

	if [ -f $XDEBUG_ACTIVE ]; then
	    sudo mv $XDEBUG_ACTIVE $XDEBUG_DEACTIVE;
		sudo brew services restart php
		echo "Xdebug is OFF"
	elif [ -f $XDEBUG_DEACTIVE ]; then
		sudo mv $XDEBUG_DEACTIVE $XDEBUG_ACTIVE;
		sudo brew services restart php
		echo "Xdebug is ON"
	fi
}

function tempsync::push (){

	set -e

	local RED=`tput setaf 1`
	local GREEN=`tput setaf 2`
	local BLUE=`tput setaf 6`
	local YELLOW=`tput setaf 3`
	local PURPLE=`tput setaf 5`
	local NC=`tput sgr0` # No Color
	local TAG="${BLUE}FRAME TOOLSET ${NC}:::: "
	local NL=`tput il 1`

	local DROPBOXPATH="/Users/dev/Dropbox (Personal)/tmp-sync";
	local CURRENT=`pwd`;

	if [ $# -ne 2 ]; then
		echo "${TAG}${RED}Your must supply two arguments *project name*  &  *relative dir name*  ";
		echo "${NC}................................";
		echo "";
		exit 1;
	fi;

	mkdir -p "${DROPBOXPATH}/${1}/${2}";

	echo "$CURRENT/${2}" >  "${DROPBOXPATH}/${1}/${2}/source.txt";

	echo "${TAG}${YELLOW}Preparing to rsync";
	echo "${NC}................................";
	echo "";

	rsync -azPh "$CURRENT/${2}" "${DROPBOXPATH}/${1}/";

	echo "${TAG}${GREEN}Successfull";
	echo "${NC}................................";
	echo "";

}

function tempsync::pull (){

	set -e

	local RED=`tput setaf 1`
	local GREEN=`tput setaf 2`
	local BLUE=`tput setaf 6`
	local YELLOW=`tput setaf 3`
	local PURPLE=`tput setaf 5`
	local NC=`tput sgr0` # No Color
	local TAG="${BLUE}FRAME TOOLSET ${NC}:::: "
	local NL=`tput il 1`

	local DROPBOXPATH="/Users/dev/Dropbox (Personal)/tmp-sync";
	local CURRENT=`pwd`;

	if [ $# -lt 2 ]; then
		echo "${TAG}${RED}Your must supply two arguments *project name*  &  *relative dir name*  ";
		echo "${YELLOW}Third Argument is destination (optional) - dest as fed to rsync (relative or absolute) ";
		echo "${NC}................................";
		echo "";
		exit 1;
	fi;

	local SOURCE=`cat ${DROPBOXPATH}/${1}/${2}/source.txt`;

	if [ ! -n "${3}" ]; then
		local PATH="${SOURCE}";
	else
		local PATH="${3}";
	fi

	rsync -azPh "${DROPBOXPATH}/${1}/${2}/" "$PATH/" ;

	echo "${TAG}${GREEN}Successfull";
	echo "${NC}................................";
	echo "";

}

function frame_log_do_setup(){

    local TODAY=$(date +"%Y-%m-%d");
    local LOGFOLDER="${TODAY}";

    if [ -z $FRAME_CLI_LOG_BASE_DIRECTORY ]; then

        export FRAME_CLI_LOG_BASE_DIRECTORY="${HOME}/.frame_cli/logs";

    fi

    mkdir -p $FRAME_CLI_LOG_BASE_DIRECTORY;

    mkdir -p "${FRAME_CLI_LOG_BASE_DIRECTORY}/${LOGFOLDER}"

    export FRAME_CLI_LOG_FOLDER="${FRAME_CLI_LOG_BASE_DIRECTORY}/${LOGFOLDER}"

	FULL_LOG_PATH=$FRAME_CLI_LOG_FOLDER;

}

function frame_composer_proxy(){

    local TODAY=$(date +"%Y-%m-%d");
    local LOGFOLDER="${TODAY}";
    FULL_LOG_PATH="${FRAME_CLI_LOG_BASE_DIRECTORY}/${LOGFOLDER}";
    local CURRENT_FOLDER=${PWD##*/}

    if [ ! -d $FULL_LOG_PATH ]; then
        frame_log_do_setup;
    fi

    /usr/local/bin/composer $@  2>&1 | tee -a "${FULL_LOG_PATH}/${CURRENT_FOLDER%/}-log.txt";

}
